treename: mmtree/tree

selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (event_no%7 != 0) & (fj_msd>=50) & (fj_msd<190) & (fj_pt>200) & (fj_pt<1000)

test_time_selection:
   (event_no%7 == 0) & (fj_msd>=50) & (fj_msd<190) & (fj_pt>200) & (fj_pt<1000)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
   #sv_mask: awkward.JaggedArray.ones_like(sv_etarel)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - pfcand_etarel
         - pfcand_phirel
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - pfcand_etarel
         - pfcand_phirel
         - [pfcand_abseta, 0.6, 1.6]
         - pfcand_charge
         - pfcand_lostInnerHits
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]
         - [pfcand_btagEtaRel, 1.5, 0.5]
         - [pfcand_btagPtRatio, 0, 1]
         - [pfcand_btagPParRatio, 0, 1]
   pf_mask:
      length: 100
      vars: 
         - pfcand_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      label_QCD_all,
      label_H_bb, label_H_cc, label_H_qq,
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_msd

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 251, 316, 398, 501, 630, 800] # 793, 997, 1255, 1579, 1987, 2500]
      fj_msd: [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190] # [30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260]
   reweight_classes: [label_QCD_all, label_H_bb, label_H_cc, label_H_qq]
   class_weights: [1, 1, 1, 1]
   reweight_threshold: 20
   reweight_hists:

